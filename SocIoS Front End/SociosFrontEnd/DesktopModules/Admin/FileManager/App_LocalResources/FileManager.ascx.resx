<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FileManager.Text" xml:space="preserve">
    <value>File Manager</value>
  </data>
  <data name="HostRoot.Text" xml:space="preserve">
    <value>Host Root</value>
  </data>
  <data name="PortalRoot.Text" xml:space="preserve">
    <value>Portal Root</value>
  </data>
  <data name="FileName.Header" xml:space="preserve">
    <value>File Name</value>
  </data>
  <data name="Size.Header" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="DiskSpace.Text" xml:space="preserve">
    <value>Disk Space</value>
  </data>
  <data name="Capacity.Text" xml:space="preserve">
    <value>Capacity</value>
  </data>
  <data name="Used.Text" xml:space="preserve">
    <value>Used</value>
  </data>
  <data name="Free.Text" xml:space="preserve">
    <value>Free</value>
  </data>
  <data name="MB.Text" xml:space="preserve">
    <value>MB</value>
  </data>
  <data name="AddContent.Action" xml:space="preserve">
    <value>Upload New File(s)</value>
  </data>
  <data name="ControlTitle_.Text" xml:space="preserve">
    <value>File Manager</value>
  </data>
  <data name="Ok.Text" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="Cancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CopyFiles.Text" xml:space="preserve">
    <value>Copy Files</value>
  </data>
  <data name="CancelCopy.Text" xml:space="preserve">
    <value>Cancel Copy</value>
  </data>
  <data name="MoveFiles.Text" xml:space="preserve">
    <value>Move Files</value>
  </data>
  <data name="CancelMove.Text" xml:space="preserve">
    <value>Cancel Move</value>
  </data>
  <data name="NoFilesChecked.Text" xml:space="preserve">
    <value>No Files Checked</value>
  </data>
  <data name="PleaseSpecifyAFolderNameFirst.Text" xml:space="preserve">
    <value>Please Specify A Folder Name First</value>
  </data>
  <data name="CopyCheckedFiles.Text" xml:space="preserve">
    <value>Copy Checked Files?</value>
  </data>
  <data name="MoveCheckedFiles.Text" xml:space="preserve">
    <value>Move Checked Files?</value>
  </data>
  <data name="DeleteFolder.Text" xml:space="preserve">
    <value>Delete Folder:</value>
  </data>
  <data name="DeleteFolderLabel.Text" xml:space="preserve">
    <value>Delete Folder</value>
  </data>
  <data name="MoveSelectedFilesTo.Text" xml:space="preserve">
    <value>Move Selected Files To:</value>
  </data>
  <data name="CopySelectedFilesTo.Text" xml:space="preserve">
    <value>Copy Selected Files To:</value>
  </data>
  <data name="UnzipSelectedFilesTo.Text" xml:space="preserve">
    <value>Unzip Selected Files To:</value>
  </data>
  <data name="AddFolderImg.AlternateText" xml:space="preserve">
    <value>Add Folder</value>
  </data>
  <data name="DeleteFolderImg.AlternateText" xml:space="preserve">
    <value>Delete Folder</value>
  </data>
  <data name="RefreshImg.AlternateText" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="CopyImg.AlternateText" xml:space="preserve">
    <value>Copy Files</value>
  </data>
  <data name="MoveImg.AlternateText" xml:space="preserve">
    <value>Move Files</value>
  </data>
  <data name="UploadImg.AlternateText" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="DeleteImg.AlternateText" xml:space="preserve">
    <value>Delete Files</value>
  </data>
  <data name="FilterImg.AlternateText" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="RenameFileImg.AlternateText" xml:space="preserve">
    <value>Rename File</value>
  </data>
  <data name="SaveChangesImg.AlternateText" xml:space="preserve">
    <value>Save Changes</value>
  </data>
  <data name="DeleteFileImg.AlternateText" xml:space="preserve">
    <value>Delete File</value>
  </data>
  <data name="CancelRenameImg.AlternateText" xml:space="preserve">
    <value>Cancel Rename</value>
  </data>
  <data name="UnzipFileImg.AlternateText" xml:space="preserve">
    <value>Unzip File</value>
  </data>
  <data name="GetFolderProperties.AlternateText" xml:space="preserve">
    <value>Get Folder Properties</value>
  </data>
  <data name="NotAllowedToDeleteRootFolder.Text" xml:space="preserve">
    <value>Not Allowed to delete Root folder...</value>
  </data>
  <data name="FolderAlreadyRemoved.Text" xml:space="preserve">
    <value>Folder already removed...</value>
  </data>
  <data name="PleaseRemoveFilesBeforeDeleting.Text" xml:space="preserve">
    <value>Please Remove Files/Sub-Folders Before Deleting Folder...</value>
  </data>
  <data name="ErrorMovingFile.Text" xml:space="preserve">
    <value>Error Moving File:</value>
  </data>
  <data name="ErrorCopyingFile.Text" xml:space="preserve">
    <value>Error Copying File:</value>
  </data>
  <data name="plPermissions.Text" xml:space="preserve">
    <value>Permissions:</value>
  </data>
  <data name="plPermissions.Help" xml:space="preserve">
    <value>Assign Permissions for the Folder currently selected in the Folders list displayed above.</value>
  </data>
  <data name="Folders.Text" xml:space="preserve">
    <value>Folders</value>
  </data>
  <data name="Date.Header" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="ErrorDeletingFolder.Text" xml:space="preserve">
    <value>Error Deleting Folder:&lt;br/&gt;</value>
  </data>
  <data name="NotEnoughSpace.Text" xml:space="preserve">
    <value>Not Enough avaialble Portal Space</value>
  </data>
  <data name="PleaseLogin.Text" xml:space="preserve">
    <value>Please login before copying/moving files</value>
  </data>
  <data name="ErrorUnzippingFile.Text" xml:space="preserve">
    <value>Error Unzipping File:</value>
  </data>
  <data name="ItemsPerPage.Text" xml:space="preserve">
    <value>Items Per Page:</value>
  </data>
  <data name="SpaceUsed.Text" xml:space="preserve">
    <value>Used: {0} of {1}</value>
  </data>
  <data name="MovingFiles.Text" xml:space="preserve">
    <value>Moving Files:</value>
  </data>
  <data name="CopyingFiles.Text" xml:space="preserve">
    <value>Copying Files:</value>
  </data>
  <data name="UnzippingFile.Text" xml:space="preserve">
    <value>Unzipping File:</value>
  </data>
  <data name="FromFolder.Text" xml:space="preserve">
    <value>From Folder:</value>
  </data>
  <data name="ToFolder.Text" xml:space="preserve">
    <value>To Folder:  Select Destination Folder from Folder Explorer.</value>
  </data>
  <data name="DeleteFiles.Text" xml:space="preserve">
    <value>Delete Files</value>
  </data>
  <data name="Security.Text" xml:space="preserve">
    <value>Folder Security Settings</value>
  </data>
  <data name="SelectAll.Text" xml:space="preserve">
    <value>Select All</value>
  </data>
  <data name="UnSelectAll.Text" xml:space="preserve">
    <value>UnSelect All</value>
  </data>
  <data name="Rename.Error" xml:space="preserve">
    <value>Error Renaming File: &lt;br/&gt;</value>
  </data>
  <data name="SetAttrubute.Error" xml:space="preserve">
    <value>Errors Occured While Attempting to Change File Attributes: &lt;br/&gt;</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;About File Manager&lt;/h1&gt;&lt;p&gt;Administrators can manage the files stored in their upload directory. This module allows you to upload new files, download files, delete files, and synchronize your upload directory. It also provides information on the amount of disk space used and available.&lt;/p&gt;</value>
  </data>
  <data name="Refresh.Text" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="EnsureDeleteFile.Text" xml:space="preserve">
    <value>Are You Sure You Wish To Delete The File {0} ?</value>
  </data>
  <data name="EnsureDeleteFolder.Text" xml:space="preserve">
    <value>Are You Sure You Wish To Delete The Folder {0} ?</value>
  </data>
  <data name="ErrorDeletingFile.Text" xml:space="preserve">
    <value>Error Deleting File:&amp;nbsp;</value>
  </data>
  <data name="UnlimitedSpace.Text" xml:space="preserve">
    <value>[unlimited]</value>
  </data>
  <data name="InsecureFileSystem.Text" xml:space="preserve">
    <value>Standard - File System</value>
  </data>
  <data name="SecureFileSystem.Text" xml:space="preserve">
    <value>Secure - File System</value>
  </data>
  <data name="SecureDatabase.Text" xml:space="preserve">
    <value>Secure - Database</value>
  </data>
  <data name="plStorageLocation.Text" xml:space="preserve">
    <value>Storage Location:</value>
  </data>
  <data name="plStorageLocation.Help" xml:space="preserve">
    <value>The way the selected folder will store files.</value>
  </data>
  <data name="FolderBar.Text" xml:space="preserve">
    <value>Folders:</value>
  </data>
  <data name="FileBar.Text" xml:space="preserve">
    <value>Files:</value>
  </data>
  <data name="AddFolder.Text" xml:space="preserve">
    <value>Add Folder</value>
  </data>
  <data name="SynchronizeFolder.Text" xml:space="preserve">
    <value>Synchronize Files</value>
  </data>
  <data name="lnkSyncFolderIMG.AlternateText" xml:space="preserve">
    <value>Synchronize Files</value>
  </data>
  <data name="Recursive.Text" xml:space="preserve">
    <value>Recursive</value>
  </data>
  <data name="NoWritePermission.Text" xml:space="preserve">
    <value>You do not have Write permissions on the Destination Folder.</value>
  </data>
  <data name="PermissionsError.Text" xml:space="preserve">
    <value>There was an error updating the permissions.  Check the Event Log for more details.</value>
  </data>
  <data name="PermissionsUpdated.Text" xml:space="preserve">
    <value>Folder Permissions successfully updated.</value>
  </data>
  <data name="ManageFolderTypes.Action" xml:space="preserve">
    <value>Manage Folder Types</value>
  </data>
  <data name="SecureFolderWarning.Text" xml:space="preserve">
    <value>These permissions apply to DotNetNuke.  Anonymous users may be able to bypass DotNetNuke and read these files.  Other folder providers such as Secure, and Database can prevent all anonymous access to files.</value>
  </data>
  <data name="ErrorDownloadingFile.Text" xml:space="preserve">
    <value>Error Downloading File:&amp;nbsp;</value>
  </data>
  <data name="ErrorSynchronizingFolder.Text" xml:space="preserve">
    <value>Error Synchronizing Folder:&amp;nbsp;</value>
  </data>
  <data name="ErrorSynchronizingFolders.Text" xml:space="preserve">
    <value>Error Synchronizing Folders:&amp;nbsp;</value>
  </data>
  <data name="ConflictFiles.Text" xml:space="preserve">
    <value>Below files already exist in destination folder,&lt;br /&gt; If you want to overwrite them, please check the box before file name.</value>
  </data>
</root>