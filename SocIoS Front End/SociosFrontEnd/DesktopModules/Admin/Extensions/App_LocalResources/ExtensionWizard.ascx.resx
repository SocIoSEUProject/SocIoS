<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers && schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cancel.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="ControlTitle_newextension.Text" xml:space="preserve">
    <value>New Extension Wizard</value>
  </data>
  <data name="Core.Text" xml:space="preserve">
    <value>Core Language</value>
  </data>
  <data name="DuplicateName.Text" xml:space="preserve">
    <value>The name - {0} - already exists.  Please provide another name and try again.</value>
  </data>
  <data name="IntroductionHelp.Text" xml:space="preserve">
    <value>In the first step please provide a unique name for the new Extension, - it is recommended that you use the format CompanyName.Name to avoid potential clashes if you intend to distribute the extension.  In addition, you should provide a friendly name for the Extension,  a description for the Extension and you should select a version (or the default version No.  0.0.0 will be used)</value>
  </data>
  <data name="Introduction.Help" xml:space="preserve">
    <value>The Create New Extension Wizard allows you to create new Extensions.  Enter the information requested in each step.  Please select the type of Extension to create.</value>
  </data>
  <data name="Introduction.Title" xml:space="preserve">
    <value>Create New Extension</value>
  </data>
  <data name="OwnerInfo.Help" xml:space="preserve">
    <value>In this last step you can optional provide details about the owner of the Extension.  This information is very useful if you plan on distributing your extension.</value>
  </data>
  <data name="OwnerInfo.Title" xml:space="preserve">
    <value>Owner Details</value>
  </data>
  <data name="Package.Text" xml:space="preserve">
    <value>Extension Language </value>
  </data>
  <data name="PackageType.Error" xml:space="preserve">
    <value>You must select a Language Pack Type</value>
  </data>
  <data name="plExtensionType.Help" xml:space="preserve">
    <value>Select the type of Extension to create</value>
  </data>
  <data name="plExtensionType.Text" xml:space="preserve">
    <value>Select Extension Type:</value>
  </data>
  <data name="plPackageType.Help" xml:space="preserve">
    <value>Select whether this is a Core language Pack or a Language Pack for another Extension.</value>
  </data>
  <data name="plPackageType.Text" xml:space="preserve">
    <value>Select Language Pack Type:</value>
  </data>
  <data name="Specific_CoreLanguagePack.Help" xml:space="preserve">
    <value>In this step please choose the language for the Package.</value>
  </data>
  <data name="Specific_CoreLanguagePack.Title" xml:space="preserve">
    <value>Language Pack Specific Details</value>
  </data>
  <data name="Specific_Module.Help" xml:space="preserve">
    <value>In this step please provide any module specific information.</value>
  </data>
  <data name="Specific_Module.Title" xml:space="preserve">
    <value>Module Specific Details</value>
  </data>
  <data name="Specific_ExtensionLanguagePack.Help" xml:space="preserve">
    <value>In this step please choose the language and extension for the Package.</value>
  </data>
  <data name="Specific_ExtensionLanguagePack.Title" xml:space="preserve">
    <value>Language Pack Specific Details</value>
  </data>
  <data name="ExtensionLanguageHelp.Text" xml:space="preserve">
    <value>&lt;b&gt;Note:&lt;/b&gt; If you are creating an Extension Language Pack the Extension must already be defined.</value>
  </data>
  <data name="LanguageHelp.Text" xml:space="preserve">
    <value>&lt;b&gt;Note:&lt;/b&gt; If you are creating a Language Pack the Language must already be defined in the Admin/Languages module.</value>
  </data>
</root>